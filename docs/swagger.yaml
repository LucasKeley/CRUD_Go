openapi: 3.0.3
info:
  title: CRUD_Go API
  description: API REST para gerenciamento de usuários com autenticação JWT.
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /createUser:
    post:
      summary: Cria um novo usuário
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Erro de validação
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        '500':
          description: Erro interno do servidor
  /login:
    post:
      summary: Autentica um usuário
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Autenticação bem-sucedida
          headers:
            Authorization:
              description: Token JWT para autenticação Bearer
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /getUserById/{userId}:
    get:
      summary: Busca um usuário pelo ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            description: Identificador do usuário (ObjectID em hex)
      responses:
        '200':
          description: Usuário retornado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: ID inválido
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /getUserByEmail/{userEmail}:
    get:
      summary: Busca um usuário pelo e-mail
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: userEmail
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Usuário retornado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /updateUser/{userId}:
    put:
      summary: Atualiza os dados de um usuário
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Usuário atualizado com sucesso
        '400':
          description: Erro de validação
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /deleteUser/{userId}:
    delete:
      summary: Remove um usuário
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuário removido com sucesso
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRequest:
      type: object
      required:
        - email
        - password
        - name
        - age
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 20
          description: Deve conter pelo menos um caractere especial (@_!#$%&*-?)
        name:
          type: string
          minLength: 4
          maxLength: 50
        age:
          type: integer
          minimum: 12
          maximum: 140
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 4
          maxLength: 50
        age:
          type: integer
          minimum: 12
          maximum: 140
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 20
    UserResponse:
      type: object
      properties:
        id:
          type: string
          description: Identificador do usuário
        email:
          type: string
          format: email
        name:
          type: string
        age:
          type: integer
    RestError:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
        code:
          type: integer
        causes:
          type: array
          items:
            $ref: '#/components/schemas/RestErrorCause'
    RestErrorCause:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
